{"version":3,"file":"static/js/304.bc69ee7c.chunk.js","mappings":"qLAEaA,E,OAAYC,GAAAA,IAAH,qT,wGCCTC,EAAOD,EAAAA,GAAAA,GAAH,2SAeJE,EAAMF,EAAAA,GAAAA,IAAH,yFAKHG,EAAOH,EAAAA,GAAAA,EAAH,6DAKJI,GAAWJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,wN,SCtBRM,EAAiB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,OACpCC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACV,EAAD,WAEE,UAACG,EAAD,CAAUQ,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMJ,GAA9C,WACE,SAACR,EAAD,CAAKa,IAAG,yCAAoCN,GAAUO,IAAKT,KAC3D,SAACJ,EAAD,UAAOI,QAId,EChBYU,EAAOjB,EAAAA,GAAAA,GAAH,wGCIJkB,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAE3B,OACE,SAACF,EAAD,UACGE,EAAOC,KAAI,SAAAC,GACV,OACE,SAACf,EAAD,CAEEC,MAAOc,EAAMd,MACbC,GAAIa,EAAMb,GACVC,OAAQY,EAAMC,aAHTD,EAAMb,GAMhB,KAGN,C,+HCpBYe,E,OAASvB,GAAAA,GAAH,iI,SCiCnB,EAzBa,WACX,OAA4BwB,EAAAA,EAAAA,UAAS,IAArC,eAAOL,EAAP,KAAeM,EAAf,KAcA,OATAC,EAAAA,EAAAA,YAAU,YAMRC,EAAAA,EAAAA,MAAsBC,KAAKH,EAC5B,GAAE,IAGDN,IACE,UAAC,IAAD,YACE,SAACI,EAAD,gDACA,SAACL,EAAA,EAAD,CAAYC,OAAQA,MAI3B,C,+LC/BKU,EAAU,mCAGT,SAAeF,IAAtB,4CAAO,OAAP,oBAAO,8GAEoBG,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CACNC,QAASH,KAJV,cAEGI,EAFH,yBAOIA,EAASC,KAAKC,SAPlB,gCASHC,QAAQC,IAAR,MATG,gFAaA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAwCC,EAAYC,GAApD,iGAEoBV,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CACNC,QAASH,EACTY,MAAOF,EACPC,KAAAA,KAND,cAEGP,EAFH,yBASIA,EAASC,KAAKC,SATlB,gCAWHC,QAAQC,IAAR,MAXG,gFAeA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,iGAEoBb,EAAAA,EAAAA,GAAM,SAAD,OAAUa,GAAW,CAC/CZ,OAAQ,CACNC,QAASH,EACTrB,GAAImC,KALL,cAEGV,EAFH,yBAQIA,EAASC,MARb,gCAUHE,QAAQC,IAAR,MAVG,gFAcA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAqCD,GAArC,iGAEoBb,EAAAA,EAAAA,GAAM,SAAD,OAAUa,EAAV,YAA6B,CACvDZ,OAAQ,CACNC,QAASH,EACTrB,GAAImC,KALL,cAEGV,EAFH,yBAQIA,EAASC,KAAKW,MARlB,gCAUHT,QAAQC,IAAR,MAVG,gFAcA,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAAqCH,GAArC,iGAEoBb,EAAAA,EAAAA,GAAM,SAAD,OAAUa,EAAV,YAA6B,CACvDZ,OAAQ,CACNC,QAASH,EACTrB,GAAImC,KALL,cAEGV,EAFH,yBAQIA,EAASC,KAAKC,SARlB,gCAUHC,QAAQC,IAAR,MAVG,gFA1DPP,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["components/CommonStyles.js","components/MoviesListItem/MovieListItem.js","components/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MovieList.js","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 100%;\n  padding-left: 15px;\n  padding-right: 15px;\n\n  @media screen and (min-width: 480px) {\n    width: 480px;\n    margin: 0 auto;\n  }\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n  @media screen and (min-width: 1200px) {\n    width: 1200px;\n  }\n`;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Item = styled.li`\n  width: 210px;\n  background-color: #496785;\n  border-radius: 5px;\n  transition: 0.4s;\n\n  &:hover {\n    transform: scale(1.02);\n    box-shadow: 0px 0px 30px 1px rgba(0, 255, 117, 0.3);\n  }\n  &:active {\n    box-shadow: 0px 0px 12px 0px rgba(225, 225, 225, 1);\n  }\n`;\n\nexport const Img = styled.img`\n  border-top-right-radius: 5px;\n  border-top-left-radius: 5px;\n`;\n\nexport const Text = styled.p`\n  padding: 10px;\n  // color: #fff;\n`;\n\nexport const LinkText = styled(Link)`\n  display: block;\n  text-align: center;\n  text-decoration: none;\n  text-transform: uppercase;\n  color: #fff;\n  font-weight: 500;\n  transition: 0.4s;\n  &:hover {\n    color: #333;\n  }\n`;\n","//import { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Item, Img, Text, LinkText } from './MovieListItem';\n\nexport const MoviesListItem = ({ title, id, poster }) => {\n  const location = useLocation();\n  // const idToString = id.toString();\n  return (\n    <Item>\n      {/* <Link to={idToString}>{title}</Link> */}\n      <LinkText to={`/movies/${id}`} state={{ from: location }}>\n        <Img src={`https://image.tmdb.org/t/p/w500${poster}`} alt={title} />\n        <Text>{title}</Text>\n      </LinkText>\n    </Item>\n  );\n};\n\nMoviesListItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n`;\n","import PropTypes from 'prop-types';\n\nimport { MoviesListItem } from 'components/MoviesListItem/MoviesListItem';\n\nimport { List } from './MovieList';\n\nexport const MoviesList = ({ movies }) => {\n  //console.log(movies);\n  return (\n    <List>\n      {movies.map(movie => {\n        return (\n          <MoviesListItem\n            key={movie.id}\n            title={movie.title}\n            id={movie.id}\n            poster={movie.poster_path}\n          />\n        );\n      })}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Header = styled.h1`\n  margin-bottom: 30px;\n  text-align: center;\n  color: #fff;\n  font-size: 1.7em;\n  font-weight: 600;\n`;\n","import { useState, useEffect } from 'react';\n//import { useRef } from 'react';\nimport { fetchTrendingMovies } from 'services/moviesAPI';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\n\nimport { Container } from 'components/CommonStyles';\nimport { Header } from './Home.styled';\n\n//import { Link } from 'react-router-dom';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  //убрать этот isFirstRender при пуше на гит, из-за него не идёт запрос на сервер\n  // const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    // if (isFirstRender.current) {\n    //   isFirstRender.current = false;\n    //   return;\n    // }\n\n    fetchTrendingMovies().then(setMovies);\n  }, []);\n\n  return (\n    movies && (\n      <Container>\n        <Header>20 Most Popular Movies Right Now</Header>\n        <MoviesList movies={movies} />\n      </Container>\n    )\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst API_KEY = 'd929b7a4b435aa22496bb0793b172bfc';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchTrendingMovies() {\n  try {\n    const response = await axios('trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMoviesBySearchQuery(searchWord, page) {\n  try {\n    const response = await axios('search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: searchWord,\n        page,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieById(movieId) {\n  try {\n    const response = await axios(`movie/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n        id: movieId,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieCreditsById(movieId) {\n  try {\n    const response = await axios(`movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n        id: movieId,\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieReviewsById(movieId) {\n  try {\n    const response = await axios(`movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        id: movieId,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["Container","styled","Item","Img","Text","LinkText","Link","MoviesListItem","title","id","poster","location","useLocation","to","state","from","src","alt","List","MoviesList","movies","map","movie","poster_path","Header","useState","setMovies","useEffect","fetchTrendingMovies","then","API_KEY","axios","params","api_key","response","data","results","console","log","fetchMoviesBySearchQuery","searchWord","page","query","fetchMovieById","movieId","fetchMovieCreditsById","cast","fetchMovieReviewsById"],"sourceRoot":""}