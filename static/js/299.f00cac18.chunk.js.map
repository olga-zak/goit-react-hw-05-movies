{"version":3,"file":"static/js/299.f00cac18.chunk.js","mappings":"uPAEaA,EAAcC,EAAAA,GAAAA,IAAH,yMAUXC,EAAMD,EAAAA,GAAAA,IAAH,6FAMHE,EAAOF,EAAAA,GAAAA,EAAH,2GAOJG,EAAOH,EAAAA,GAAAA,EAAH,iE,SCvBJI,EAAY,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WACtC,OACE,+BACE,UAACR,EAAD,YACE,SAACE,EAAD,CAAKO,IAAG,yCAAoCD,GAAcE,IAAKJ,KAC/D,SAACH,EAAD,UAAOG,KACP,SAACF,EAAD,UAAOG,QAKd,ECXYI,EAAOV,EAAAA,GAAAA,GAAH,4ECoCjB,EA7BkB,WAChB,OAA8BW,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAOR,OALAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAsBH,GAASI,KAAKL,EACrC,GAAE,CAACC,KAIF,gCACGF,IACC,SAACF,EAAD,UACGE,EAAQO,KAAI,SAAAC,GACX,OACE,SAAChB,EAAD,CAEEC,KAAMe,EAAOf,KACbC,KAAMc,EAAOC,UACbd,WAAYa,EAAOE,cAHdF,EAAOG,UAMjB,OAGL,uEAGL,C,+LCnCKC,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8GAEoBC,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CACNC,QAASJ,KAJV,cAEGK,EAFH,yBAOIA,EAASC,KAAKC,SAPlB,gCASHC,QAAQC,IAAR,MATG,gFAaA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAwCC,EAAYC,GAApD,iGAEoBV,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CACNC,QAASJ,EACTa,MAAOF,EACPC,KAAAA,KAND,cAEGP,EAFH,yBASIA,EAASC,KAAKC,SATlB,gCAWHC,QAAQC,IAAR,MAXG,gFAeA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BxB,GAA9B,iGAEoBY,EAAAA,EAAAA,GAAM,SAAD,OAAUZ,GAAW,CAC/Ca,OAAQ,CACNC,QAASJ,EACTe,GAAIzB,KALL,cAEGe,EAFH,yBAQIA,EAASC,MARb,gCAUHE,QAAQC,IAAR,MAVG,gFAcA,SAAehB,EAAtB,+CAAO,OAAP,oBAAO,WAAqCH,GAArC,iGAEoBY,EAAAA,EAAAA,GAAM,SAAD,OAAUZ,EAAV,YAA6B,CACvDa,OAAQ,CACNC,QAASJ,EACTe,GAAIzB,KALL,cAEGe,EAFH,yBAQIA,EAASC,KAAKU,MARlB,gCAUHR,QAAQC,IAAR,MAVG,gFAcA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAqC3B,GAArC,iGAEoBY,EAAAA,EAAAA,GAAM,SAAD,OAAUZ,EAAV,YAA6B,CACvDa,OAAQ,CACNC,QAASJ,EACTe,GAAIzB,KALL,cAEGe,EAFH,yBAQIA,EAASC,KAAKC,SARlB,gCAUHC,QAAQC,IAAR,MAVG,gFA1DPP,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["components/ActorCard/ActorCard.styled.js","components/ActorCard/ActorCard.jsx","components/MovieCast/MovieCast.styled.js","components/MovieCast/MovieCast.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CardWrapper = styled.div`\n  width: 240px;\n  margin: 0 auto;\n  padding: 30px 0;\n  text-align: center;\n  background-color: #ffffff;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n`;\n\nexport const Img = styled.img`\n  width: 100px;\n  margin: 0 auto 25px auto;\n  border-radius: 50%;\n`;\n\nexport const Name = styled.p`\n  margin-bottom: 10px;\n  font-size: 20px;\n  color: black;\n  font-weight: bold;\n`;\n\nexport const Role = styled.p`\n  font-size: 15px;\n  font-weight: 500;\n`;\n","import { CardWrapper, Img, Name, Role } from './ActorCard.styled';\n\nexport const ActorCard = ({ name, role, photo_path }) => {\n  return (\n    <>\n      <CardWrapper>\n        <Img src={`https://image.tmdb.org/t/p/w500${photo_path}`} alt={name} />\n        <Name>{name}</Name>\n        <Role>{role}</Role>\n        {/* <p className={styles.location}>{location}</p> */}\n      </CardWrapper>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n","//delete hook useFetchMovieCredits\nimport { useState, useEffect } from 'react';\nimport { fetchMovieCreditsById } from 'services/moviesAPI';\nimport { useParams } from 'react-router-dom';\n\nimport { ActorCard } from 'components/ActorCard/ActorCard';\n\nimport { List } from './MovieCast.styled';\n\nconst MovieCast = () => {\n  const [credits, setCredits] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchMovieCreditsById(movieId).then(setCredits);\n  }, [movieId]);\n\n  //console.log(credits); //сначала консолит нулл, потом только массив\n  return (\n    <>\n      {credits && (\n        <List>\n          {credits.map(credit => {\n            return (\n              <ActorCard\n                key={credit.credit_id}\n                name={credit.name}\n                role={credit.character}\n                photo_path={credit.profile_path}\n              />\n            );\n          })}\n        </List>\n      )}\n      <p>Here will be additional info \"Movie Cast\"</p>\n    </>\n  );\n};\nexport default MovieCast;\n","import axios from 'axios';\n\nconst API_KEY = 'd929b7a4b435aa22496bb0793b172bfc';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchTrendingMovies() {\n  try {\n    const response = await axios('trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMoviesBySearchQuery(searchWord, page) {\n  try {\n    const response = await axios('search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: searchWord,\n        page,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieById(movieId) {\n  try {\n    const response = await axios(`movie/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n        id: movieId,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieCreditsById(movieId) {\n  try {\n    const response = await axios(`movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n        id: movieId,\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieReviewsById(movieId) {\n  try {\n    const response = await axios(`movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        id: movieId,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["CardWrapper","styled","Img","Name","Role","ActorCard","name","role","photo_path","src","alt","List","useState","credits","setCredits","movieId","useParams","useEffect","fetchMovieCreditsById","then","map","credit","character","profile_path","credit_id","API_KEY","fetchTrendingMovies","axios","params","api_key","response","data","results","console","log","fetchMoviesBySearchQuery","searchWord","page","query","fetchMovieById","id","cast","fetchMovieReviewsById"],"sourceRoot":""}